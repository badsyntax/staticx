#!/usr/bin/env node

/*
 * staticx
 * https://github.com/badsyntax/staticx
 *
 * Copyright (c) 2013 Richard Willis
 * Licensed under the MIT license.
 */

'use strict';

/**
 * Load dependencies.
 */
var staticx = require('../lib/staticx');
var program = require('commander');
var pkg = require('../package');
var colors = require('colors');
var path = require('path');
var prompt = require('prompt');
var fs = require('fs');


/**
 * Add colors to a string.
 * @param  {integer}  code      The exit code.
 * @param  {boolean}  substr    Is this a substitution string? (eg: 'Example %s')
 * @param  {string}   message   The message string to colorize.
 * @param  {integer}  index     The current array index.
 * @return {string}             The colorized string.
 */
function colorize(code, substr, message, index) {
  return !substr || index === 0 ? message[[
    'info',
    'error'
  ][code]] : message;
}

/**
 * Show a colorized log message and exit the process.
 * @param  {integer}  code      The exit code.
 * @param  {string}   message   The log message.
 */
function exit(code, message) {

  var args = [].slice.call(arguments, 1)
    .map(colorize.bind(null, code, /\%[sd]/.test(arguments[1])));

  console.log.apply(console, args);
  process.exit(code);
}

/**
 * Create command object.
 * @type {Object}
 */
var Create = {
  /**
   * Start the create command.
   * @param  {object} options Command options.
   */
  init:  function(options) {
    if (options.interactive) {
      this.getOptions(this.action.bind(this));
    } else {
      this.action(options);
    }
  },
  /**
   * Run the create action.
   * @param  {object} options The options object.
   */
  action: function(options) {
    staticx.create(options, this.onCreate.bind(this, new Date(), options));
  },
  /**
   * Create handler, called after the create action has been run.
   * @param  {date} start     A date object.
   * @param  {object} options Command options.
   * @param  {string} err     An error string if the task fails.
   */
  onCreate: function(start, options, err) {

    if (err) exit(1, err);

    var msg = [
      'Successfully created a new site at: %s',
      'Completed in %dms'.data
    ].join('\n');

    exit(0, msg, path.resolve(options.destination), new Date() - start);
  },
  /**
   * Prompt the user for various options.
   * @param  {Function} done The callback function to run once all options have
   * been gathered.
   */
  getOptions: function(done) {
    prompt.message = 'Create';
    prompt.start();
    prompt.get([{
      name: 'destination',
      description: 'Destination path',
      type: 'string',
      required: true,
      message: 'Path does not exist',
      conform: function(value) {
        return fs.existsSync(value);
      }
    }, {
      name: 'posts',
      description: 'Number of posts',
      type: 'string',
      pattern: /^\w+$/,
      default: '0',
      required: true
    }, {
      name: 'clean',
      description: 'Clean the directory first? (y/n)',
      type: 'string',
      pattern: /^[yn]$/i,
      message: 'Please enter either \'y\' or \'n\'',
      default: 'n',
      required: true,
      before: function(value) {
        return value.toLowerCase() === 'y';
      }
    }], function (err, result) {
      if (err) exit(1, err);
      done(result);
    });
  }
};

/**
 * The CLI object. This object will set the CLI environment and set the
 * commands which can be run from the CLI.
 * @type {Object}
 */
var CLI = {
  init: function() {
    program.version(pkg.version);
    this.setColors();
    this.setCommands();
    program.parse(process.argv);
  },
  setColors: function() {
    colors.setTheme({
      error: 'red',
      info: 'green',
      data: 'grey'
    });
  },
  setCommands: function() {
    program
    .command('create')
    .description('create a new site')
    .option('-d, --destination <destination>', 'destination path')
    .option('-p, --posts <posts>', 'number of dummy blog posts to generate', parseInt)
    .option('-c, --clean', 'clean the destination folder before creating')
    .option('-i, --interactive', 'use prompts to set the options')
    .action(Create.init.bind(Create));
  }
};

CLI.init();
